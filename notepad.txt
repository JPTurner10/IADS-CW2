Pseudo for A(iv)

n = |V|
m = |E|
Adj
IS = [0] * n
deg = [0] * n
for u = 0 to (n-1) do:
    deg[u] = len(Adj[u])
while (some vertices remain in graph) do:
    u = argmin {deg[v]; IS[v] == 0}
    IS[u] = 1
    for (w in Nbd(u)) do:
        IS[w] = -1
        del_edge(w)
for u = 0 to (n-1)
    IS[u] = max{0, IS[u]}
return IS


Assuming the graph is represented as an adjancency list, justify O(n^2+m)
running time where n=|V|, m=|E|

always loop to initialise deg[u] -> O(n)

worst case we look at every Vertex, in order for this, no edges can exist.
Check and compare all vertices to find largest
this would run at O(n^2) since it would not enter Nbd for loop, not quite what we need



On other side all vertices connected to each other mean that after one execution,
the program will finish. This would be best case scenario




del_edge(w):
    current = Adj[w]
    while next exists:
        if IS[next] == 0:
            deg[next] -= 1
            current2 = Adj[next]
            while next2 exists:
                if next2 == w:
                    next2 = nextnext2
                else:
                    current2 = next2
        next = nextnext


(v)
        

Each w has n connections

Each u has 3 connections

Each v has 4 connections to ws, and 1 to a singular u

u_1 will be selected first, this will then eliminate v_1, v_1+(n/3), and v_1+2(n/3)
hence lowering the degree of all w by 3

u wil continue to be selected till all have been done so.

This process will elimate all v. 

w will not be selected until all u have since down to the last v they will always have at least 4 connections

once all u have been selected, the ws will be selected since they will now have no connections

Thus leaving us with an IS of size n/3 + 4


The maximum set will be R since it is of size n and is completely disjoint

